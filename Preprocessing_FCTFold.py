# -*- coding: utf-8 -*-
"""Preprocessing_PSSP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DNN7KScsBffFiQmas_noS9atUZKAKDZE
"""



import os
import pandas as pd

# ================================================================
# üß© Module 1: Extract HELIX, SHEET, and COIL regions from a PDB file
# ================================================================
def extract_helix_sheet_coil_from_file(pdb_file_path, filename):
    """
    Parses a single PDB file to extract HELIX, SHEET, and COIL (non-HELIX/SHEET) regions
    along with their residue names.

    Parameters:
        pdb_file_path (str): Full path to the .pdb or .ent file
        filename (str): Name of the file (for labeling output)

    Returns:
        list of lists: Each row contains [Filename, Residue Range, Label, Residue Names]
    """
    # === Step 1: Initialize containers for data ===
    helix_lines = []
    sheet_lines = []
    atom_lines = []

    # === Step 2: Read file and categorize lines ===
    try:
        with open(pdb_file_path, 'r') as file:
            for line in file:
                if line.startswith("HELIX"):
                    helix_lines.append(line.rstrip('\n'))
                elif line.startswith("SHEET"):
                    sheet_lines.append(line.rstrip('\n'))
                elif line.startswith("ATOM"):
                    atom_lines.append(line.rstrip('\n'))
    except Exception as e:
        print(f"‚ö†Ô∏è Could not read {filename}: {e}")
        return []

    # === Step 3: Extract atomic data (residue info) ===
    atom_data = []
    for line in atom_lines:
        if len(line) >= 26:
            atom_data.append([
                line[0:6].strip(),     # Record type (ATOM)
                line[6:11].strip(),    # Atom serial number
                line[12:16].strip(),   # Atom name
                line[17:20].strip(),   # Residue name
                line[21].strip(),      # Chain ID
                line[22:26].strip()    # Residue sequence number
            ])

    # Create DataFrame of atomic data
    atom_df = pd.DataFrame(atom_data, columns=['Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6'])
    atom_df['Col6'] = pd.to_numeric(atom_df['Col6'], errors='coerce')  # Ensure Col6 is numeric
    atom_df = atom_df.dropna(subset=['Col6'])  # Drop non-numeric positions

    # === Step 4: Parse HELIX, SHEET, and COIL regions ===
    all_rows = []
    used_positions = set()

    # -- HELIX regions
    for line in helix_lines:
        if len(line) >= 38:
            try:
                start = int(line[21:25].strip())
                end = int(line[33:37].strip())
                positions = list(range(start, end + 1))
                residues = atom_df[atom_df['Col6'].isin(positions)]['Col4'].tolist()
                all_rows.append([filename, f"{start}-{end}", 'HELIX', ' '.join(residues)])
                used_positions.update(positions)
            except:
                continue

    # -- SHEET regions
    for line in sheet_lines:
        if len(line) >= 38:
            try:
                start = int(line[22:26].strip())
                end = int(line[33:37].strip())
                positions = list(range(start, end + 1))
                residues = atom_df[atom_df['Col6'].isin(positions)]['Col4'].tolist()
                all_rows.append([filename, f"{start}-{end}", 'SHEET', ' '.join(residues)])
                used_positions.update(positions)
            except:
                continue

    # -- COIL regions (everything not used in HELIX/SHEET)
    full_positions = sorted(atom_df['Col6'].unique())
    coil_ranges = []
    current_range = []

    for pos in full_positions:
        if pos not in used_positions:
            current_range.append(pos)
        elif current_range:
            coil_ranges.append(current_range)
            current_range = []
    if current_range:
        coil_ranges.append(current_range)

    for coil in coil_ranges:
        try:
            start = coil[0]
            end = coil[-1]
            residues = atom_df[atom_df['Col6'].isin(coil)]['Col4'].tolist()
            all_rows.append([filename, f"{start}-{end}", 'COIL', ' '.join(residues)])
        except:
            continue

    return all_rows


# ================================================================
# üìÇ Module 2: Process all files in a folder and extract secondary structure info
# ================================================================
def process_folder(folder_path, max_files=None):
    """
    Processes all PDB/ENT files in a folder and compiles the HELIX, SHEET,
    and COIL residue information into a CSV.

    Parameters:
        folder_path (str): Directory path containing .pdb/.ent files
        max_files (int): Optional limit on number of files to process

    Output:
        Creates a CSV file named "helix_sheet_coil_all_Ecoli.csv" in the input folder
    """
    final_data = []

    # Get only PDB/ENT files from the folder
    files = sorted([f for f in os.listdir(folder_path) if f.endswith(".pdb") or f.endswith(".ent")])
    files_to_process = files[:max_files] if max_files else files

    print(f"üîç Found {len(files_to_process)} files to process...")

    # Process each file individually
    for i, filename in enumerate(files_to_process):
        file_path = os.path.join(folder_path, filename)
        print(f"üìÑ Processing {filename} ({i+1}/{len(files_to_process)})")
        rows = extract_helix_sheet_coil_from_file(file_path, filename)
        final_data.extend(rows)

    # Save results as CSV
    output_df = pd.DataFrame(final_data, columns=["Filename", "Range", "Label", "Residues"])
    output_path = os.path.join(folder_path, "helix_sheet_coil_all_Ecoli.csv")
    output_df.to_csv(output_path, index=False)
    print(f"‚úÖ Saved results to '{output_path}'")


# ================================================================
# üîß Module 3: Entry point ‚Äì specify folder to process
# ================================================================
if __name__ == "__main__":
    # Set the path to the folder containing PDB files
    folder_path = "C://Users//mousu//8mer//pdb_data//Ecoli"

    # Run the process on all PDB/ENT files in the folder
    process_folder(folder_path)